
package AlgoritmoGenetico;

import system_rfid.Inicio;



public class IndividuoLector {
       private final int[] cromosoma;
       private int int_x, int_y;
       private int float_x, float_y;               
       private double radio, factor,powerStep;
       private double vx=0,vy=0;
               double escalaX=0, escalaY=0, escalaR=0;
               
       

               
public IndividuoLector(){

            cromosoma = new int[21]; 
            radio = 1;
            powerStep = 0; 
}

public IndividuoLector(double potencia){
        

            vx = Math.random()*Inicio.rango();//  VALORES  REALES    
            vy = Math.random()*Inicio.rango();//  VALORES  REALES 

            radio = 1;// VALOR REAL

            escalaR =  radio*2*500/(Inicio.rango()*2);//ESCALA LAS MEDIDAS
            escalaX =  vx*500/Inicio.rango()+30; //ESCALA LAS MEDIDAS
            escalaY =  vy*500/Inicio.rango()+30;// ESCALA LAS MEDIDAS

   
           cromosoma = new int[21];

           if(potencia == 0.0){
           powerStep = 0;
           }else if(potencia == 0.1){
           powerStep = 1;
           }else if(potencia == 0.2){
           powerStep = 2;
           }else if(potencia == 0.4){
           powerStep = 4;
           }else if(potencia == 0.6){
           powerStep = 6;
           }else if(potencia == 0.8){
           powerStep = 8;
           }else if(potencia == 0.9){
           powerStep = 9;
           }
                       
                  
  
}
            
public  int[] codificarCromosoma(double valorX, double valorY){//TRANSFORMA LOS VALORES A 1s Y 0s
                
                   int_x = (int)valorX;
                   int_y = (int)valorY;
                   
                   float_x = (int)((valorX-(int)valorX)*10);
                   float_y = (int)((valorY-(int)valorY)*10);
                   
                
                // POWERSTEP  
                    for(int gen = 3; gen > -1; gen--){
                    cromosoma[gen] = (int)powerStep%2;
                    powerStep = powerStep/2;
                    
                    }

 
                // PARTE ENTERA
                    for(int gen = 20; gen > -1; gen--){
                       if(gen >= 3  && gen <= 7  ){
                        cromosoma[gen] = int_x%2;
                        int_x = int_x/2; 
                       }
                       
                       if(gen >= 12 && gen <= 16){
                        cromosoma[gen] = int_y%2;
                        int_y = int_y/2;
                       }
                     }
                 // PARTE DECIMAL
                    for(int gen = 20; gen > -1; gen--){
                       if(gen >= 8 && gen <= 11){
                        cromosoma[gen] = float_x%2;
                        float_x = float_x/2;
                        
                       }
                       
                       if(gen >= 17 && gen <= 20){
                        cromosoma[gen] = float_y%2;
                        float_y = float_y/2;
                       }
                     }

                 return cromosoma;
                       
            }
            
public void decodificarCromo(int cromo[]){//TRANSFORMA LOS BITS 1s Y 0s A VALORES DECIMALES  
                
            //POWERSTEP
            int peso = -1;
            int peso1 = -1;
            int peso2 = -1;
                
            powerStep = 0;
            for(int gen = 2; gen > -1; gen--){
                  peso++;
                  powerStep = (int)(cromo[gen]*Math.pow(2,peso))+powerStep;
            }

            int_x=0;
            for(int gen = 7; gen > 2; gen--){ 
                   peso1++;
                   int_x = (int)(cromo[gen]*Math.pow(2,peso1)) + int_x;
            }


            peso1 = -1;
            float_x=0;
            for(int gen = 11; gen > 7; gen--){
                   peso1++;
                   float_x = (int)(cromo[gen]*Math.pow(2,peso1)) + float_x;
            }

            int_y=0;
            for(int gen = 16; gen > 11; gen--){ 
                   peso2++;
                   int_y = (int) (cromo[gen]*Math.pow(2,peso2)) + int_y;
            }

            peso2 = -1;
            float_y=0;
            for(int gen = 20; gen > 16; gen--){
                   peso2++;
                   float_y = (int)(cromo[gen]*Math.pow(2,peso2)) + float_y;
            }
           
            
            
            vx = (double)int_x + (double)float_x/10.0;
            vy = (double)int_y + (double)float_y/10.0;
            
               
}

public  int[] Genes(IndividuoLector x){
    
              int[] Genes = new int[21];

              Genes = codificarCromosoma(x.vx, x.vy);

              return Genes;
                    
}




public double vx(){
    
        return  vx;
}

public double vy(){

        return vy;
    
}

public double radio(){

        return radio;
}

public double potencia(){

        return powerStep;
    
}




           



     
 
}
