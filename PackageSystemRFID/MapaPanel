
package system_rfid;

import AlgoritmoGenetico.Poblacion;
import AlgoritmoGenetico.Calculos;

import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;





public class Panel extends JPanel {
        
        double posx, posy,radio; 
        double x1,x2,y1,y2;
        
        ArrayList<Lector>  lectores;
        ArrayList<Tag> tags;
        Area area;
        Poblacion p;
     
public Panel(int largo, int ancho, Poblacion poblacion){
    
            p = poblacion;
            lectores = new ArrayList<>();
            tags = new ArrayList<>();
            area = new Area(largo,ancho);
            
            setLayout(null);
            setBackground(Color.white);
            setSize(500, 500);
                           
                
}
        
       
        @Override
 public void paint(Graphics g){
        
               Graphics2D g2 = (Graphics2D)g;
               super.paint(g);
     
//DIBUJA LOS LECTOR  
                
            LectoresAleatorios();
            lectores.stream().forEach((lector) -> {// = for(Lector lector : lectores)
                lector.figuraLector(g);
            });
           
//DIBUJA LOS TAGS
             
            TagsAleatorios();
            tags.stream().forEach((tag) -> { //esta forma se usa colocando la forma anterior y java la cambia automaticamente 
                tag.figuraTags(g);
            });
             
//DIBUJA EL AREA DONDE SE COLOCAN LOS LECTORES 


            area.dibujarArea(g);
            area.dibujarLimites(g, 4, 4.5);
            
 
//DIBUJA LOS PUNTOS DE INTERSECCION
           
            dibujarIntersecciones(g);
                   
}


public void LectoresAleatorios(){
    
            for(int x = 0; x < p.TotalLectores(); x++){
                  posx =  p.escaladoX(p.Individuo(x));
                  posy =  p.escaladoY(p.Individuo(x));
                  radio = p.radioEscalado(p.Individuo(x));
                  lectores.add(new Lector(posx, posy,radio));
                  
                }

}

public void TagsAleatorios(){

            for(int x = 0; x < p.TotalTags(); x++){
                   posx = p.escalarTagX(x);
                   posy = p.escalarTagY(x);
                   
                   tags.add(new Tag(posx, posy));
               
                }

}

public void dibujarIntersecciones(Graphics g){
                
                Graphics2D g2 = (Graphics2D)g;
    
          for(int x = 0; x < p.TotalLectores(); x++)
           for(int j = 0; j < p.TotalLectores(); j++){

               if(x != j ){

                x1 = Calculos.escaladoX1(p.Individuo(x), p.Individuo(j));
                y1 = Calculos.escaladoY1(p.Individuo(x), p.Individuo(j));

                x2 = Calculos.escaladoX2(p.Individuo(x), p.Individuo(j));
                y2 = Calculos.escaladoY2(p.Individuo(x), p.Individuo(j));


                Rectangle2D interseccion1 = new Rectangle2D.Double(x1-0.5,y1-0.5, 2, 2);
                Rectangle2D interseccion2 = new Rectangle2D.Double(x2-0.5,y2-0.5, 2, 2);
                g2.setColor(Color.red);
                g2.draw(interseccion1);
                g2.draw(interseccion2);

               }
           }

}


          
}
