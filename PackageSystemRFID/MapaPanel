package system_rfid;

import AlgoritmoGenetico.Poblacion;
import AlgoritmoGenetico.Calculos;

import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import javax.swing.JButton;






public class MapaPanel extends JPanel {
        
        double posx, posy;
        int  xo = 25, yo = 10;
        float largo = 20f;
        float ancho = 20f;
       
        ArrayList<Lector>  lectores = new ArrayList<>();
        ArrayList<Tag> tags = new ArrayList<>();
        Calculos c = new Calculos();

        
        
        
        public MapaPanel(int largo, int ancho){
            
            
            setSize(largo, ancho);
            setBackground(Color.white);
           
            
      // GENERA LAS POSICIONES ALEATORIAS INICIALES
        
                for(int x = 0; x < Poblacion.TotalPoblacion(); x++){
                  posx = Poblacion.LectorPX(x);
                  posy = Poblacion.LectorPY(x);
                  
                  lectores.add(new Lector(posx, posy));
                }
      
              /* for(int x = 0; x < 50; x++){
                   posx = p.TagPX(x);
                   posy = p.TagPY(x);
                   
                   tags.add(new Tag(posx, posy));
               
               }*/
                
        }
        
                   
        public void paintComponent(Graphics g){
        
               Graphics2D g2 = (Graphics2D)g;
               super.paintComponent(g);

// DIBUJA EL LECTOR  
     
            lectores.stream().forEach((lector) -> {// = for(Lector lector : lectores)
                lector.figuraLector(g);
            });
            
//DIBUJA LOS TAGS
                   
            tags.stream().forEach((tag) -> { //esta forma se usa colocando la forma anterior y java la cambia automaticamente 
                tag.figuraTags(g);
            });
             
//DIBUJA EL AREA DONDE SE COLOCAN LOS LECTORES 
            
            
            Rectangle2D area = new Rectangle2D.Float(xo,yo,Ventana.largoPix,Ventana.anchoPix);
            g2.setColor(Color.black);
            g2.draw(area);   
            
            for(int x = 0, gap = 0; x < Math.round(largo)+1 && gap < Math.round(largo)+1; x++,gap++){
                g2.drawLine(gap*Ventana.largoPix/Math.round(largo)+xo, yo, gap*Ventana.largoPix/Math.round(largo)+xo, yo+Ventana.largoPix);
                g2.drawString(""+x,gap*Ventana.largoPix/Math.round(largo)+xo, yo);
            }
            for(int y = 0, gap = 0; y < Math.round(ancho)+1 && gap < Math.round(ancho)+1 ; y++,gap++){    
                g2.drawLine(xo, gap*Ventana.anchoPix/Math.round(ancho)+yo, xo+Ventana.anchoPix, gap*Ventana.anchoPix/Math.round(ancho)+yo);
                g2.drawString(""+y,yo,gap*Ventana.anchoPix/Math.round(ancho)+yo);
            }
 
//DIBUJA LOS PUNTOS DE INTERSECCION
           
           for(int x = 0; x < Poblacion.TotalPoblacion(); x++)
               for(int j = 0; j < Poblacion.TotalPoblacion(); j++){
                
                   if(x != j ){
                    Ellipse2D interseccion1 = new Ellipse2D.Double(c.puntoX1(x, j)-1,c.puntoY1(x, j)-1, 2, 2);
                    Ellipse2D interseccion2 = new Ellipse2D.Double(c.puntoX2(x, j)-1,c.puntoY2(x, j)-1, 2, 2);
                    g2.setColor(Color.red);
                    g2.draw(interseccion1);
                    g2.draw(interseccion2);
    
                   }
               }
           
           
        }

          
}
