package AlgoritmoGenetico;



public class Calculos {
    
    
     static double  x1, x2, y1, y2, base, altura, hipotenusa, alfa1, areaSC1, alfa2, areaSC2;
     static double a1, a2, b1, b2, r1, r2, a, b, c, A, B, C;
     static double D1, D2, E1, E2, F1, F2;
     static double area, areaT1, areaT2;
     
     
    
public static void PuntosInterseccion(IndividuoLector i1, IndividuoLector i2){
          
            
            a1 = i1.vx(); 
            b1 = i1.vy();
            r1 = i1.radio();
            
            a2 = i2.vx();
            b2 = i2.vy();
            r2 = i2.radio();
            
            D1 = -2*a1;
            E1 = -2*b1;
            F1 = a1*a1 + b1*b1 - r1*r1;
            
            D2 = -2*a2;
            E2 = -2*b2;
            F2 = a2*a2 + b2*b2 - r2*r2;
            
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
             if(a1!=a2 && b1==b2){
                 A = D1 - D2;
                 C = F1 - F2;
                 
                 a = 1;
                 b = -2*b1;
                 c = C/A*C/A + 2*a1*C/A + b1*b1- r1*r1 + a1*a1;
                 
                 y1 = (-b + Math.sqrt(b*b - 4*a*c))/(2*a);
                 y2 = (-b - Math.sqrt(b*b - 4*a*c))/(2*a);
                 
                 x1 = -C/A;
                 x2 = -C/A;                
              }
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
              if(a1==a2 && b1!=b2){
                B = E1 - E2;
                C = F1 - F2;
                
                a = 1;
                b = -2*a1;
                c = C/B*C/B + 2*b1*C/B + b1*b1 - r1*r1 + a1*a1;
                
                x1 = (-b + Math.sqrt(b*b - 4*a*c))/(2*a);
                x2 = (-b - Math.sqrt(b*b - 4*a*c))/(2*a);
                
                y1 = -C/B;
                y2 = -C/B;
              
              }
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
              if(a1!=a2 && b1!=b2){  
                A = D1 - D2;
                B = E1 - E2;
                C = F1 - F2;

                a = 1 + A/B*A/B;
                b = 2*A*C/(B*B) + D1 - E1*A/B;
                c = C/B*C/B - E1*C/B + F1;
              
                x1 = (-b + Math.sqrt(b*b - 4*a*c))/(2*a);
                x2 = (-b - Math.sqrt(b*b - 4*a*c))/(2*a);

                y1 = -A*x1/B - C/B;
                y2 = -A*x2/B - C/B;
                
              }  
        
}

public static void InterseccionesEscaladas(IndividuoLector i1, IndividuoLector i2){
          
            
            a1 = i1.escalaX; 
            b1 = i1.escalaY;
            r1 = i1.escalaR;
            
            a2 = i2.escalaX;
            b2 = i2.escalaY;
            r2 = i2.escalaR;
            
            D1 = -2*a1;
            E1 = -2*b1;
            F1 = a1*a1 + b1*b1 - r1*r1;
            
            D2 = -2*a2;
            E2 = -2*b2;
            F2 = a2*a2 + b2*b2 - r2*r2;
            
            A = D1 - D2;
            B = E1 - E2;
            C = F1 - F2;
            
            a = 1 + A/B*A/B;
            b = 2*A*C/(B*B) + D1 - E1*A/B;
            c = C/B*C/B - E1*C/B + F1;
            
//+++++++++++++++++++++++++++PUNTOS DE INTERSECCION+++++++++++++++++++++++++++++ 

            x1 = (-b + Math.sqrt(b*b - 4*a*c))/(2*a);
            x2 = (-b - Math.sqrt(b*b - 4*a*c))/(2*a);
            
            y1 = -A*x1/B - C/B;
            y2 = -A*x2/B - C/B;
            
        
}



public static void Catetos(IndividuoLector i){//++++++++DISTANCIAS ENTRE LOS PUNTOS DE INTERSECCION Y EL CENTRO DEL LECTOR++++
  
    
            base = Math.sqrt(Math.pow(x2-x1, 2)+Math.pow(y2-y1,2));
                
            hipotenusa = Math.sqrt(Math.pow(x1-i.vx(),2)+Math.pow(y1-i.vy(),2));
                
            altura = Math.sqrt(Math.pow(hipotenusa,2)-Math.pow(base/2,2));

}     
     
     
public static double AreaSL(IndividuoLector i1, IndividuoLector i2){ //AREA SOBRE-LAPAMIENTO
             
              PuntosInterseccion(i1,i2);
              
              Catetos(i1);
                
              alfa1 = Math.toDegrees(2*Math.acos(altura/hipotenusa));
              
              areaSC1 = (Math.PI*Math.pow(i1.radio(),2)* alfa1)/360;
              
              areaT1 = (base*altura)/2;
              
              PuntosInterseccion(i1,i2);
 
              Catetos(i2);
              
              alfa2 = Math.toDegrees(2*Math.acos(altura/hipotenusa));
              
              areaSC2 = (Math.PI*Math.pow(i2.radio(),2)* alfa2)/360;
              
              areaT2 = (base*altura)/2;
              
              area = areaSC1-areaT1 + areaSC2-areaT2;
             
              return area;
        }
      
      
     
public static double puntoX1(IndividuoLector i1, IndividuoLector i2){
            
            PuntosInterseccion(i1,i2);
            return x1;
        }
        
public static double puntoX2(IndividuoLector i1, IndividuoLector i2){
            
            PuntosInterseccion(i1,i2);
            return x2;
        }
        
public static double puntoY1(IndividuoLector i1, IndividuoLector i2){
            
            PuntosInterseccion(i1,i2);
            return y1;
        }
        
public static double puntoY2(IndividuoLector i1, IndividuoLector i2){
          
            PuntosInterseccion(i1,i2);
            return y2;
        }
    
public static double escaladoX1(IndividuoLector i1, IndividuoLector i2){

        InterseccionesEscaladas(i1, i2);
             return x1;
}

public static double escaladoY1(IndividuoLector i1, IndividuoLector i2){

        InterseccionesEscaladas(i1, i2);
             return y1;
}

public static double escaladoX2(IndividuoLector i1, IndividuoLector i2){

        InterseccionesEscaladas(i1, i2);
             return x2;
}

public static double escaladoY2(IndividuoLector i1, IndividuoLector i2){

        InterseccionesEscaladas(i1, i2);
             return y2;
}





}
